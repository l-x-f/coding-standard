import{_ as s,c as n,o as l,a}from"./app.ae2e2169.js";const C=JSON.parse('{"title":"JavaScript 规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"缩进","slug":"缩进","link":"#缩进","children":[]},{"level":2,"title":"分号","slug":"分号","link":"#分号","children":[]},{"level":2,"title":"单行长度","slug":"单行长度","link":"#单行长度","children":[]},{"level":2,"title":"空格","slug":"空格","link":"#空格","children":[]},{"level":2,"title":"空行","slug":"空行","link":"#空行","children":[]},{"level":2,"title":"换行","slug":"换行","link":"#换行","children":[]},{"level":2,"title":"引号","slug":"引号","link":"#引号","children":[]},{"level":2,"title":"变量命名","slug":"变量命名","link":"#变量命名","children":[]},{"level":2,"title":"变量声明","slug":"变量声明","link":"#变量声明","children":[]},{"level":2,"title":"数组、对象","slug":"数组、对象","link":"#数组、对象","children":[]},{"level":2,"title":"11. 函数","slug":"_11-函数","link":"#_11-函数","children":[]},{"level":2,"title":"12. 类","slug":"_12-类","link":"#_12-类","children":[]},{"level":2,"title":"13. null","slug":"_13-null","link":"#_13-null","children":[]},{"level":2,"title":"14. undefined","slug":"_14-undefined","link":"#_14-undefined","children":[]},{"level":2,"title":"15. 注释","slug":"_15-注释","link":"#_15-注释","children":[]},{"level":2,"title":"16. 其他","slug":"_16-其他","link":"#_16-其他","children":[]}],"relativePath":"docs/code/js/index.md"}'),e={name:"docs/code/js/index.md"},p=a(`<h1 id="javascript-规范" tabindex="-1">JavaScript 规范 <a class="header-anchor" href="#javascript-规范" aria-hidden="true">#</a></h1><p><strong>不需要记住每一条，但是需要熟悉，规范中绝大部分采用 <code>eslint</code>和<code>prettier</code> 配置对应规则强制统一，其他好的代码习惯则需要记住。</strong></p><h2 id="缩进" tabindex="-1">缩进 <a class="header-anchor" href="#缩进" aria-hidden="true">#</a></h2><p>缩进使用 2 个空格；</p><h2 id="分号" tabindex="-1">分号 <a class="header-anchor" href="#分号" aria-hidden="true">#</a></h2><p>非不要不加分号，特殊的语句除外。</p><p>特殊的语句</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> lang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">More</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">更多</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">(window </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Editor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setLanguage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zh-CN</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> lang)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="单行长度" tabindex="-1">单行长度 <a class="header-anchor" href="#单行长度" aria-hidden="true">#</a></h2><p>一般不要超过 80 。</p><h2 id="空格" tabindex="-1">空格 <a class="header-anchor" href="#空格" aria-hidden="true">#</a></h2><p>以下几种情况需要空格：</p><ul><li>二元运算符前后</li><li>三元运算符<code>?:</code>前后</li><li>代码块<code>{</code>前</li><li>下列关键字前：<code>else</code>, <code>while</code>, <code>catch</code>, <code>finally</code></li><li>下列关键字后：<code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>case</code>, <code>try</code>, <code>catch</code>, <code>finally</code>, <code>with</code>, <code>return</code>, <code>typeof</code></li><li>单行注释<code>//</code>后（若单行注释和代码同行，则<code>//</code>前也需要），多行注释<code>/*</code>后</li><li>对象的属性值前</li><li>for 循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格</li><li>无论是函数声明还是函数表达式，<code>{</code>前一定要有空格</li><li>函数的参数之间</li></ul><h2 id="空行" tabindex="-1">空行 <a class="header-anchor" href="#空行" aria-hidden="true">#</a></h2><p>以下几种情况需要空行：</p><ul><li>变量声明后（当变量声明在代码块的最后一行时，则无需空行）</li><li>注释前（当注释在代码块的第一行时，则无需空行）</li><li>代码块后（在函数调用、数组、对象中则无需空行）</li><li>文件最后保留一个空行</li></ul><h2 id="换行" tabindex="-1">换行 <a class="header-anchor" href="#换行" aria-hidden="true">#</a></h2><p>以下几种情况需要换行：</p><ul><li>代码块<code>{</code>后和<code>}</code>前</li><li>变量赋值后</li></ul><h2 id="引号" tabindex="-1">引号 <a class="header-anchor" href="#引号" aria-hidden="true">#</a></h2><p>最外层统一使用单引号。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="变量命名" tabindex="-1">变量命名 <a class="header-anchor" href="#变量命名" aria-hidden="true">#</a></h2><p>变量命名使用有意义，可读性好的变量名，尽量使用变量名自解释，尽量使用易检索名称。</p><ul><li>标准变量采用驼峰式命名</li><li>常量全大写，用下划线连接</li><li>构造函数和类，大写第一个字母</li><li>私有变量，一般用<code>_</code> 单个下划线开头</li><li>特殊命名 <code>ID</code>，<code>URL</code> 在变量名中全大写 ， <code>Android</code>在变量名中大写第一个字母， <code>iOS</code>在变量名中小写第一个，大写后两个字母。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> thisIsMyName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xi</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> goodID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">151654156156</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reportURL </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://wwww.xx.com</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> AndroidVersion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">V1.0.0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> iOSVersion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">V1.0.0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MAX_COUNT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">width</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_height</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">height</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="变量声明" tabindex="-1">变量声明 <a class="header-anchor" href="#变量声明" aria-hidden="true">#</a></h2><p>所有变量声明的时候优先使用 <code>const</code>，只有需要改变变量本身时才使用<code>let</code>，非必要情况下不要使用 <code>var</code> 来声明变量。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MAX_COUNT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="数组、对象" tabindex="-1">数组、对象 <a class="header-anchor" href="#数组、对象" aria-hidden="true">#</a></h2><ul><li><p>对象属性名不需要加引号，（特殊变量除外）；</p></li><li><p>对象以缩进的形式书写，不要写在一行；</p></li><li><p>数组、对象最后不要有逗号；</p></li><li><p>操作数组对象时尽可能使用不改变源数据的方法；</p></li><li><p>操作复杂数组对象需要改变源数据时尽可能使用<code>深拷贝</code>；</p></li><li><p>操作数组对象时尽可能使用函数式编程，避免使用命令式的方法；</p><p>类如 删除对象属性 不要用 <code>delete </code>命令， 应该使用 <code>Reflect.deleteProperty()</code></p></li><li><p>善于利用 ES6 Array 处理数组</p><p><code>Array.find()</code>,<code>Array.forEach()</code>,<code>Array.filter()</code>,<code>Array.map()</code>,<code>Array.reduce()</code></p><p>数组 <code>rest</code> 运算符</p><p>多重判断时使用 <code>Array.includes</code></p><p>对 所有/部分 判断使用 <code>Array.every</code> &amp; <code>Array.some</code></p></li><li><p>善于利用 <code>ES6 Object</code> 和<code>Reflect</code>处理对象</p><p>对象解构</p><p><code>rest</code></p><p><code>Object.assign()</code></p><p><code>Object.keys()</code>,<code>Object.values()</code></p><p><code>Reflect.get()</code>,<code>Reflect.set()</code>,<code>Reflect.deleteProperty()</code> 等</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 不推荐</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;"> </span></span>
<span class="line"><span style="color:#C3E88D;">const a = {</span></span>
<span class="line"><span style="color:#C3E88D;">  &#39;b&#39;: 1,</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#C3E88D;">const b = [1, 2, 3, 1, 3,]</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 推荐</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">a-d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_11-函数" tabindex="-1">11. 函数 <a class="header-anchor" href="#_11-函数" aria-hidden="true">#</a></h2><ul><li><p>函数名应明确表明其功能</p></li><li><p>函数应该只做一层抽象</p></li><li><p>函数功能的单一性</p><p>这是软件功能中最重要的原则之一。 功能不单一的函数将导致难以重构、测试和理解。功能单一的函数易于重构，并使代码更加干净。</p></li><li><p>函数尽量是纯函数</p><p>纯函数 (<code>Pure Function</code>) ，它必须符合两个条件：</p><ul><li><p>返回结果只依赖于它的参数。</p></li><li><p>并且在执行过程里面没有副作用。</p></li></ul></li><li><p>函数参数 (理想情况下应不超过 2 个)</p><p>限制函数参数数量很有必要，这么做使得在测试函数时更加轻松。过多的参数将导致难以采用有效的测试用例对函数的各个参数进行测试。</p><p>应避免三个以上参数的函数。通常情况下，参数超过两个意味着函数功能过于复杂，这时需要重新优化你的函数。当确实需要多个参数时，大多情况下可以考虑这些参数封装成一个对象。</p><p>JS 定义对象非常方便，当需要多个参数时，可以使用一个对象进行替代。</p></li><li><p>更少的嵌套，尽早 return</p></li><li><p>使用默认参数和解构</p></li><li><p>尽量不要使用标记(Flag)作为函数参数</p></li><li><p>不要写全局函数</p></li><li><p>异步函数使用 <code>Async/Await</code> ，它是较 <code>Promises</code> 更好的选择</p></li><li><p>对 <code>Promises</code> 异步函数 进行 <code>try/catch</code> 错误处理</p></li></ul><h2 id="_12-类" tabindex="-1">12. 类 <a class="header-anchor" href="#_12-类" aria-hidden="true">#</a></h2><ul><li><p>使用 <code>ES6</code> 的 <code>class</code> 而不是 <code>ES5</code> 的构造函数 <code>Function</code></p></li><li><p>遵循 <code>SOLID</code> 原则</p><p>S：单一职责原则（<code>SRP</code>） 每个类应该负责系统的单个部分或功能。</p><p>O : 开闭原则 （<code>OSP</code>） 软件组件应该对扩展开放，而不是对修改开放。</p><p>L : 里氏替换原则 （<code>LSP</code>） 超类的对象应该可以用其子类的对象替换而不破坏系统。</p><p>I：接口隔离原则（<code>ISP</code>） 不应强迫客户端依赖于它不使用的方法。</p><p>D：依赖倒置原则（<code>DIP</code>）高层模块不应该依赖低层模块，两者都应该依赖抽象。</p></li></ul><h2 id="_13-null" tabindex="-1">13. null <a class="header-anchor" href="#_13-null" aria-hidden="true">#</a></h2><p>适用场景：</p><ul><li>初始化一个将来可能被赋值为对象的变量</li><li>与已经初始化的变量做比较</li><li>作为一个参数为对象的函数的调用传参</li><li>作为一个返回对象的函数的返回值</li></ul><p>不适用场景：</p><ul><li>不要用 null 来判断函数调用时有无传参</li><li>不要与未初始化的变量做比较</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (a </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_14-undefined" tabindex="-1">14. undefined <a class="header-anchor" href="#_14-undefined" aria-hidden="true">#</a></h2><p>永远不要直接使用 <code>undefined</code> 进行变量判断；</p><p>使用 typeof 和字符串<code>undefined</code>对变量进行判断。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 不推荐</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (person </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 推荐</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_15-注释" tabindex="-1">15. 注释 <a class="header-anchor" href="#_15-注释" aria-hidden="true">#</a></h2><p>对存在一定业务逻辑复杂性的代码进行注释，对所有常量，所有函数，所有类进行注释。 注释并不是必须的，好的代码是能够让人一目了然，不用过多无谓的注释。</p><ul><li><p>单行注释</p><p>双斜线后，必须跟一个空格；缩进与下一行代码保持一致；可位于一个代码行的末尾，与代码间隔一个空格。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// if you made it here, then all security checks passed</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">allowed</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>多行注释</p><p>最少三行, <code>/*</code>后跟一个空格，具体参照右边的写法；</p><p>建议在以下情况下使用：</p><p>难于理解的代码段 可能存在错误的代码段 浏览器特殊的 <code>HACK</code> 代码 业务逻辑强相关的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 多行注释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>文档注释</p><p>各类标签 <code>@param</code>, <code>@method</code> 使用 <code>jsdoc</code> 规范。</p><p>建议在以下情况下使用：</p><p>所有常量， 所有函数，所有类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">func</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">desc</span><span style="color:#676E95;font-style:italic;"> 一个带参数的函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#676E95;font-style:italic;"> - 参数a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">number</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#676E95;font-style:italic;">=1 - 参数b默认值为1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#676E95;font-style:italic;">=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">object</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">d</span><span style="color:#676E95;font-style:italic;"> - 参数d为一个对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">d.e</span><span style="color:#676E95;font-style:italic;"> - 参数d的e属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">d.f</span><span style="color:#676E95;font-style:italic;"> - 参数d的f属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">object[]</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#676E95;font-style:italic;"> - 参数g为一个对象数组</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">g.h</span><span style="color:#676E95;font-style:italic;"> - 参数g数组中一项的h属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">g.i</span><span style="color:#676E95;font-style:italic;"> - 参数g数组中一项的i属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#A6ACCD;font-style:italic;">j</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#676E95;font-style:italic;"> - 参数j是一个可选参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">d</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">j</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h2 id="_16-其他" tabindex="-1">16. 其他 <a class="header-anchor" href="#_16-其他" aria-hidden="true">#</a></h2><ul><li><p>判断相等时永远要用三等 <code>===</code>, 禁止用双等<code>==</code>。判断不相等时永远要用 <code>!==</code>, 禁止用双等<code>!=</code></p></li><li><p>删除无效的代码。尽量不要在代码库中遗留被注释掉的代码。</p></li><li><p><code>for in</code> 里一定要有 <code>hasOwnProperty</code> 的判断；</p></li><li><p>不要在内置对象的原型上添加方法，如 <code>Array</code>,<code> Date</code>；</p></li><li><p>不要在内层作用域的代码里声明了变量，之后却访问到了外层作用域的同名变量；</p></li><li><p>变量不要先使用后声明；</p></li><li><p>不要在一句代码中单单使用构造函数，记得将其赋值给某个变量；</p></li><li><p>不要在同个作用域下声明同名变量；</p></li><li><p>不要在一些不需要的地方加括号，例：delete(a.b)；</p></li><li><p>不要使用未声明的变量（全局变量需要加到.eslint 文件的 globals 属性里面）；</p></li><li><p>不要声明了变量却不使用；</p></li><li><p>不要在应该做比较的地方做赋值；</p></li><li><p>debugger 不要出现在提交的代码里；</p></li><li><p>数组中不要存在空元素；</p></li><li><p>不要在循环内部声明函数；</p></li><li><p>不要像这样使用构造函数，例：new function () { ... }, new Object；</p></li><li><p>避免过度优化；</p></li><li><p><code>console.log</code>避免出现在生产环境中 ；</p></li></ul>`,51),o=[p];function c(t,i,r,y,d,D){return l(),n("div",null,o)}const A=s(e,[["render",c]]);export{C as __pageData,A as default};
